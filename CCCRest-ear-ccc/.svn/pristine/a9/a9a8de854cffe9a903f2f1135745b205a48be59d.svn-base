package uk.ac.ncl.ropManager;

import java.util.Timer;

import uk.ac.ncl.core.Deadline;
import uk.ac.ncl.dao.UserManager;
import uk.ac.ncl.dao.UserManagerImpl;
import uk.ac.ncl.event.Operation;
import uk.ac.ncl.user.User;
import uk.ac.ncl.rop.Obligation;
import uk.ac.ncl.rop.Prohibition;
import uk.ac.ncl.rop.Right;
import uk.ac.ncl.state.ROPState.ObligationState;
import uk.ac.ncl.state.ROPState.ProhibitionState;
import uk.ac.ncl.state.ROPState.RightState;

public class RopManagerImpl implements RopManager
{
	private UserManager userManager;
	
	public RopManagerImpl()
	{
		userManager = new UserManagerImpl();
	}

	@Override
	public String getRole(String username) throws Exception
	{
		User user = userManager.query(username);
		if (user != null)
		{
			return user.getRole();
		}
		else
		{
			throw new Exception("No such user exists!");
		}
	}

	@Override
	public void rollbackRight(String username, Right right) throws Exception
	{
		User user = userManager.query(username);
		if (user != null)
		{
			if (userManager.changeRight(user, right, RightState.granted))
				return;
			else
				throw new Exception("Illegal right state input!");
		}
		else
		{
			throw new Exception("No such user exists!");
		}
	}

	@Override
	public void rollbackObligation(String username, Obligation obligation)
			throws Exception
	{
		User user = userManager.query(username);
		if (user != null)
		{
			if (userManager.changeObligation(user, obligation,
					ObligationState.imposed))
				return;
			else
				throw new Exception("Illegal obligaiton state input!");
		}
		else
		{
			throw new Exception("No such user exists!");
		}
	}

	@Override
	public void rollbackProhibition(String username, Prohibition prohibition)
			throws Exception
	{
		User user = userManager.query(username);
		if (user != null)
		{
			if (userManager.changeProhibition(user, prohibition,
					ProhibitionState.imposed))
				return;
			else
				throw new Exception("Illegal prohibition state input!");
		}
		else
		{
			throw new Exception("No such user exists!");
		}
	}

	@Override
	public void executeRight(String username, Right right) throws Exception
	{
		User user = userManager.query(username);
		if (user != null)
		{
			if (userManager.changeRight(user, right, RightState.executing))
				return;
			else
				throw new Exception("Illegal right state input!");
		}
		else
		{
			throw new Exception("No such user exists!");
		}

	}

	@Override
	public void executeObligation(String username, Obligation obligation)
			throws Exception
	{
		User user = userManager.query(username);
		if (user != null)
		{
			if (userManager.changeObligation(user, obligation,
					ObligationState.executing))
				return;
			else
				throw new Exception("Illegal obligaiton state input!");
		}
		else
		{
			throw new Exception("No such user exists!");
		}
	}

	@Override
	public void executeProhibition(String username, Prohibition prohibition)
			throws Exception
	{
		User user = userManager.query(username);
		if (user != null)
		{
			if (userManager.changeProhibition(user, prohibition,
					ProhibitionState.executing))
				return;
			else
				throw new Exception("Illegal prohibition state input!");
		}
		else
		{
			throw new Exception("No such user exists!");
		}
	}

	@Override
	public boolean matchRight(String username, Operation operation)
	{
		User user = userManager.query(username);
		if (user != null)
		{
			Right right = userManager.getRight(user, operation);
			if (right == null)
				return false;
			if (right.getState() == RightState.granted)
				return true;
			else
				return false;
		}
		else
		{
			return false;
		}
	}

	@Override
	public boolean matchObligation(String username, Operation operation)
	{
		User user = userManager.query(username);
		if (user != null)
		{
			Obligation obligation = userManager.getObligation(user, operation);
			if (obligation == null)
				return false;
			if (obligation.getState() == ObligationState.imposed)
				return true;
			else
				return false;
		}
		else
		{
			return false;
		}
	}

	@Override
	public boolean matchProhibition(String username, Operation operation)
	{
		User user = userManager.query(username);
		if (user != null)
		{
			Prohibition prohibition = userManager.getProhibition(user,
					operation);
			if (prohibition == null)
				return false;
			if (prohibition.getState() == ProhibitionState.imposed)
				return true;
			else
				return false;
		}
		else
		{
			return false;
		}
	}

	@Override
	public void grantRight(String username, Right right) throws Exception
	{
		User user = userManager.query(username);
		if (user != null)
		{
			if (userManager.changeRight(user, right, RightState.granted))
				return;
			else
				userManager.addRight(user, right);
		}
		else
		{
			throw new Exception("No such user exists!");
		}

	}

	@Override
	public void imposeObligation(String username, Obligation obligation)
			throws Exception
	{
		User user = userManager.query(username);
		if (user != null)
		{
			if (userManager.changeObligation(user, obligation,
					ObligationState.imposed))
			{
				//Deadline deadline = new Deadline(obligation);
	            // Timer timer = new Timer();
	             //timer.schedule(deadline, 5000);
				//System.out.println("Deadline added!");
				return;
			}
			else
			{
				userManager.addObligation(user, obligation);
				//Deadline deadline = new Deadline(obligation);
				//Timer timer = new Timer();
	           //  timer.schedule(deadline, 10000);
				//System.out.println("Deadline added!");
			}
		}
		else
		{
			throw new Exception("No such user exist!");
		}
	}

	@Override
	public void imposeProhibition(String username, Prohibition prohibition)
			throws Exception
	{
		User user = userManager.query(username);
		if (user != null)
		{
			if (userManager.changeProhibition(user, prohibition,
					ProhibitionState.imposed))
				return;
			else
				userManager.addProhibition(user, prohibition);
		}
		else
		{
			throw new Exception("No such user exsit!");
		}
	}

	@Override
	public void completeRight(String username, Right right) throws Exception
	{
		User user = userManager.query(username);
		if (user != null)
		{
			if (userManager.changeRight(user, right, RightState.fulfilled))
				return;
			else
				throw new Exception("Illegal right state input!");
		}
		else
		{
			throw new Exception("No such user exists!");
		}
	}

	@Override
	public void completeObligation(String username, Obligation obligation)
			throws Exception
	{
		User user = userManager.query(username);
		if (user != null)
		{
			if (userManager.changeObligation(user, obligation,
					ObligationState.fulfilled))
				return;
			else
				throw new Exception("Illegal obligaiton state input!");
		}
		else
		{
			throw new Exception("No such user exists!");
		}
	}

	@Override
	public void completeProhibition(String username, Prohibition prohibition)
			throws Exception
	{
		User user = userManager.query(username);
		if (user != null)
		{
			if (userManager.changeProhibition(user, prohibition,
					ProhibitionState.violated))
				return;
			else
				throw new Exception("Illegal prohibition state input!");
		}
		else
		{
			throw new Exception("No such user exists!");
		}
	}

	@Override
	public void removeRight(String username, Right right) throws Exception
	{
		User user = userManager.query(username);
		if (user != null)
		{
			userManager.deleteRight(user, right);
		}
		else
		{
			throw new Exception("No such user exists!");
		}
	}

	@Override
	public void removeObligation(String username, Obligation obligation)
			throws Exception
	{
		User user = userManager.query(username);
		if (user != null)
		{
			userManager.deleteObligation(user, obligation);
		}
		else
		{
			throw new Exception("No such user exists!");
		}
	}

	@Override
	public void removeProhibition(String username, Prohibition prohibition)
			throws Exception
	{
		User user = userManager.query(username);
		if (user != null)
		{
			userManager.deleteProhibition(user, prohibition);
		}
		else
		{
			throw new Exception("No such user exists!");
		}
	}

	@Override
	public Right getRight(String username, Operation operation)
			throws Exception
	{
		User user = userManager.query(username);
		if (user != null)
		{
			return userManager.getRight(user, operation);
		}
		else
		{
			throw new Exception("No such user exists!");
		}
	}

	@Override
	public Obligation getObligation(String username, Operation operation)
			throws Exception
	{
		User user = userManager.query(username);
		if (user != null)
		{
			return userManager.getObligation(user, operation);
		}
		else
		{
			throw new Exception("No such user exists!");
		}
	}

	@Override
	public Prohibition getProhibition(String username, Operation operation)
			throws Exception
	{
		User user = userManager.query(username);
		if (user != null)
		{
			return userManager.getProhibition(user, operation);
		}
		else
		{
			throw new Exception("No such user exists!");
		}
	}

}
